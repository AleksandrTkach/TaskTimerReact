{"version":3,"sources":["utils/constants.js","utils/utils.js","components/TaskInfo.js","store/modules/tasks.js","components/Dialog.js","containers/Timer/Timer.js","containers/Tasks/TableLog/TasksNotFound.js","containers/Tasks/TableLog/TasksRows/BtnInfo.js","containers/Tasks/TableLog/TasksRows/BtnRemove.js","containers/Tasks/TableLog/TasksRows/TasksRows.js","containers/Tasks/TableLog/TableLog.js","store/modules/chart.js","containers/Tasks/Chart/BtnGenerate/BtnGenerate.js","containers/Tasks/Chart/Chart.js","containers/Tasks/Tabs/Tabs.js","containers/NotFound.js","store/rootReducers.js","store/sagas/buildChart.js","store/sagas/tasks.js","store/sagas/index.js","store/index.js","components/App.js","serviceWorker.js","index.js"],"names":["AMOUNT_TASKS","TASK_DURATION","MIN","MAX","ROUTER","getLS","key","arguments","length","undefined","Number","localStorage","getItem","JSON","parse","setLS","value","setItem","stringify","currentTime","Date","getTime","getFormatTime","isUTC","moment","utc","format","generateNewTasks","date","amountTasks","_getRandomNumber","timeStart","getFullYear","getMonth","getDate","newTasks","i","timeEnd","_getNextTime","push","taskName","concat","timeSpend","time","min","max","Math","round","random","changeTaskFormat","tasks","map","task","startHour","startMin","startSec","endHour","endMin","endSec","setChartColumns","chartColumns","newTasksFormat","columns","Object","toConsumableArray","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","diffHour","hour","uv","err","return","getDefaultChartColumns","name","action","type","payload","TaskInfo","_this$props","this","props","match","params","id","react_default","a","createElement","className","Card","CardHeader","title","CardContent","Table_default","TableBody_default","TableRow_default","TableCell_default","align","CardActions","style","justifyContent","react_router_dom","to","Button","size","React","Component","connect","_ref","withRouter","SET_TASK","REMOVE_TASK","setTask","initState","FormDialog","_this$props$dialogTit","dialogTitle","dialogContentText","isOpenDialog","clickDialogClose","clickDialogSuccess","_this$props$btnSucces","btnSuccessText","_this$props$btnReject","btnRejectText","Dialog","fullWidth","maxWidth","open","onClose","aria-labelledby","DialogTitle","textAlign","DialogContent","DialogContentText","children","DialogActions","onClick","color","Timer","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","toggleStatusTimer","start","stop","reset","state","isStartTimer","_toggleDialogTaskNoName","_addTaskLog","setState","handleChangeTaskName","event","target","initialTime","isOpenDialogNoName","status","_getFormatValue","text","_this2","_this$state","components_Dialog","clickDialogOpen","build","startImmediately","formatValue","Fragment","TextField","onChange","placeholder","Paper","Hours","Minutes","Seconds","Button_default","variant","mapDispatchToProps","_ref2","TasksNotFound","TableRow_TableRow","TableCell_TableCell","colSpan","BtnInfo","styleButton","index","BtnRemove","_toggleDialogRemove","isOpenDialogRemove","taskIndex","removeTask","background","borderRadius","TasksRows","_getTimeEnd","component","scope","TasksRows_BtnInfo","TasksRows_BtnRemove","useStyles","makeStyles","root","width","overflowX","table","minWidth","tableHeads","classes","Table_Table","TableHead","tableHead","TableBody_TableBody","TableLog_TasksRows_TasksRows","TasksNotFound_TasksNotFound","BUILD_CHART","buildChart","buildChartReset","buildChartSuccess","BtnGenerate","_generate","_callee","regenerator_default","wrap","_context","prev","resetTasks","sent","refreshTasks","Chart","es6","height","data","stroke","dataKey","domain","barSize","fill","label","renderLabel","Chart_BtnGenerate_BtnGenerate","PureComponent","x","y","dy","textAnchor","NavTabs","handleChange","activeTabIndex","location","pathname","AppBar","position","Tabs","Tab","Link","react_router","exact","path","TasksLog","TasksChart","NotFound","combineReducers","slice","watchBuildChart","chartColumnsWithValue","put","select","t0","console","log","_marked","_context2","takeEvery","_marked2","watchTasks","tasks_marked","_tasks","tasks_marked2","_context3","_marked3","rootSaga","all","sagas_marked","sagaMiddleware","createSagaMiddleware","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","run","App","es","Container","containers_Timer_Timer","Tasks_Tabs_Tabs","src_components_TaskInfo","Boolean","window","hostname","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2569f486.chunk.js","sourcesContent":["export const AMOUNT_TASKS = {\n  MIN: 10,\n  MAX: 15,\n};\nexport const TASK_DURATION = {\n  MIN: 10,\n  MAX: 90,\n};\nexport const MIN = 1000 * 60;\n\nexport const FOTMAT = 'HH:mm:ss';\n\nexport const ROUTER = {\n  home: '/',\n  taskInfo: '/tasks/',\n  tasksLog: '/tasks/log',\n  tasksChart: '/tasks/chart',\n};\n","import { MIN, TASK_DURATION, AMOUNT_TASKS, FOTMAT } from 'utils/constants';\nimport moment from 'moment';\n\n/**\n * Get value from LocalStorage\n *\n * @param key\n * @param isNumber\n * @returns {number}\n */\nexport const getLS = (key, isNumber = true) =>\n  isNumber\n    ? Number(localStorage.getItem(key))\n    : JSON.parse(localStorage.getItem(key));\n\n/**\n * Set value from LocalStorage\n *\n * @param key\n * @param value\n * @param isNumber\n */\nexport const setLS = (key, value, isNumber = true) =>\n  isNumber\n    ? localStorage.setItem(key, value)\n    : localStorage.setItem(key, JSON.stringify(value));\n\n/**\n * Get current time\n *\n * @returns {number}\n */\nexport const currentTime = () => new Date().getTime();\n\n/**\n * Get format time for output display\n *\n * @param value\n * @param isUTC\n * @returns {string}\n */\nexport const getFormatTime = (value, isUTC) =>\n  isUTC ? moment.utc(+value).format(FOTMAT) : moment(+value).format(FOTMAT);\n\n/**\n * Generate new tasks\n *\n * @returns {Array}\n */\nexport const generateNewTasks = () => {\n  const date = new Date();\n  const amountTasks = _getRandomNumber(AMOUNT_TASKS.MIN, AMOUNT_TASKS.MAX);\n  let timeStart = Number(\n    new Date(date.getFullYear(), date.getMonth(), date.getDate()).getTime()\n  );\n\n  const newTasks = [];\n  for (let i = 0; i < amountTasks; i++) {\n    const timeEnd = _getNextTime(timeStart);\n\n    newTasks.push({\n      taskName: `Task ${i}`,\n      timeStart,\n      timeEnd,\n      timeSpend: timeEnd - timeStart,\n    });\n\n    timeStart = _getNextTime(timeEnd);\n  }\n  return newTasks;\n};\n\n/**\n * Get random time for task\n * @param time\n * @returns {*}\n * @private\n */\nfunction _getNextTime(time) {\n  return time + _getRandomNumber(TASK_DURATION.MIN, TASK_DURATION.MAX) * MIN;\n}\n\n/**\n * Get random number\n *\n * @param min\n * @param max\n * @returns {number}\n * @private\n */\nfunction _getRandomNumber(min, max) {\n  return Math.round(Math.random() * (max - min) + min);\n}\n\n/**\n * Convert format tasks for chart\n *\n * @param tasks\n * @returns {*}\n */\nexport const changeTaskFormat = tasks =>\n  tasks.map(task => {\n    return {\n      startHour: Number(moment(task.timeStart).format('H')),\n      startMin: Number(moment(task.timeStart).format('m')),\n      startSec: Number(moment(task.timeStart).format('s')),\n\n      endHour: Number(moment(task.timeEnd).format('H')),\n      endMin: Number(moment(task.timeEnd).format('m')),\n      endSec: Number(moment(task.timeEnd).format('s')),\n    };\n  });\n\n/**\n * Set columns for chart\n *\n * @param chartColumns\n * @param newTasksFormat\n * @returns {Array}\n */\nexport const setChartColumns = (chartColumns, newTasksFormat) => {\n  let columns = [...chartColumns];\n\n  for (const task of newTasksFormat) {\n    const diffHour = task.endHour - task.startHour;\n\n    if (diffHour > 0) {\n      for (let hour = task.startHour; hour < task.endHour; hour++) {\n        if (task.startHour === hour) {\n          columns[hour].uv += 60 - task.startMin;\n        } else {\n          columns[hour].uv += 60;\n        }\n      }\n      columns[task.endHour].uv += task.endMin;\n    } else if (diffHour === 0) {\n      columns[task.endHour].uv += task.endMin - task.startMin;\n    }\n  }\n\n  return columns;\n};\n\n/**\n * Get empty columns for chart\n *\n * @returns {Array}\n */\nexport const getDefaultChartColumns = () => {\n  const columns = [];\n  for (let i = 0; i < 24; i++) {\n    columns.push({\n      name: i,\n      uv: 0,\n    });\n  }\n  return columns;\n};\n\n/**\n * Helper for actions\n *\n * @param type\n * @param payload\n * @returns {{type: *, payload: *}}\n */\nexport const action = (type, payload) => {\n  return {\n    type,\n    payload,\n  };\n};\n","import React from 'react';\nimport { withRouter, Link } from 'react-router-dom';\nimport Table from '@material-ui/core/Table/Table';\nimport TableBody from '@material-ui/core/TableBody/TableBody';\nimport TableRow from '@material-ui/core/TableRow/TableRow';\nimport TableCell from '@material-ui/core/TableCell/TableCell';\nimport Card from '@material-ui/core/Card';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardActions from '@material-ui/core/CardActions';\nimport Button from '@material-ui/core/Button';\n\nimport { connect } from 'react-redux';\nimport { getFormatTime } from 'utils/utils';\nimport { ROUTER } from 'utils/constants';\n\nimport './TaskInfo.scss';\n\nclass TaskInfo extends React.Component {\n  render() {\n    const { tasks, match } = this.props;\n    const task = tasks[match.params.id];\n\n    return (\n      <div className=\"task-info__wrapper\">\n        <Card className=\"task-info__card\">\n          <CardHeader title={`${task.taskName}`} />\n          <CardContent>\n            <Table>\n              <TableBody>\n                <TableRow>\n                  <TableCell align=\"left\"> Time start: </TableCell>\n                  <TableCell align=\"left\">\n                    {getFormatTime(task.timeStart)}\n                  </TableCell>\n                </TableRow>\n                <TableRow>\n                  <TableCell align=\"left\"> Time end: </TableCell>\n                  <TableCell align=\"left\">\n                    {getFormatTime(task.timeEnd)}\n                  </TableCell>\n                </TableRow>\n                <TableRow>\n                  <TableCell align=\"left\"> Time spend: </TableCell>\n                  <TableCell align=\"left\">\n                    {getFormatTime(task.timeSpend, true)}\n                  </TableCell>\n                </TableRow>\n              </TableBody>\n            </Table>\n          </CardContent>\n          <CardActions style={{ justifyContent: 'flex-end' }}>\n            <Link to={ROUTER.tasksLog}>\n              <Button size=\"small\"> Back </Button>\n            </Link>\n          </CardActions>\n        </Card>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = ({ tasks }) => {\n  return {\n    tasks,\n  };\n};\n\nexport default connect(mapStateToProps)(withRouter(TaskInfo));\n","import { action, getLS, setLS } from 'utils/utils';\n\nexport const SET_TASK = 'SET_TASK';\nexport const REMOVE_TASK = 'REMOVE_TASK';\nexport const REFRESH_TASKS = 'REFRESH_TASKS';\nexport const RESET_TASKS = 'RESET_TASKS';\n\nexport const setTask = payload => action(SET_TASK, payload);\nexport const removeTask = index => action(REMOVE_TASK, index);\nexport const refreshTasks = tasks => action(REFRESH_TASKS, tasks);\nexport const resetTasks = index => action(RESET_TASKS, index);\n\nconst initState = getLS('tasks', false) || [];\n\nexport const tasks = (state = initState, action) => {\n  switch (action.type) {\n    case SET_TASK:\n      return [...state, action.payload];\n\n    case REMOVE_TASK:\n      return [\n        ...state.slice(0, action.payload),\n        ...state.slice(action.payload + 1),\n      ];\n\n    case REFRESH_TASKS:\n      return action.payload;\n\n    case RESET_TASKS:\n      return [];\n\n    default:\n      return state;\n  }\n};\n","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\nclass FormDialog extends React.Component {\n  render() {\n    const {\n      dialogTitle = '',\n      dialogContentText,\n      isOpenDialog,\n      clickDialogClose,\n      clickDialogSuccess,\n      btnSuccessText = 'Close',\n      btnRejectText = null,\n    } = this.props;\n\n    return (\n      <Dialog\n        fullWidth={true}\n        maxWidth=\"sm\"\n        open={isOpenDialog}\n        onClose={clickDialogClose}\n        aria-labelledby=\"form-dialog-title\"\n      >\n        <DialogTitle id=\"form-dialog-title\" style={{ textAlign: 'center' }}>\n          {dialogTitle}\n        </DialogTitle>\n\n        <DialogContent>\n          <DialogContentText>{dialogContentText}</DialogContentText>\n          {this.props.children}\n        </DialogContent>\n\n        <DialogActions\n          style={{\n            justifyContent:\n              btnRejectText === null ? 'flex-end' : 'space-between',\n          }}\n        >\n          {btnRejectText !== null ? (\n            <Button onClick={clickDialogClose} color=\"primary\">\n              {btnRejectText}\n            </Button>\n          ) : null}\n          <Button onClick={clickDialogSuccess} color=\"primary\">\n            {btnSuccessText}\n          </Button>\n        </DialogActions>\n      </Dialog>\n    );\n  }\n}\n\nexport default FormDialog;\n","import React from 'react';\nimport ReactTimer from 'react-compound-timer';\nimport Paper from '@material-ui/core/Paper';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button/Button';\n\nimport { connect } from 'react-redux';\nimport { setTask } from 'store/modules/tasks';\nimport { getLS, setLS, currentTime } from 'utils/utils';\nimport Dialog from 'components/Dialog';\n\nimport './Timer.scss';\n\nclass Timer extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      taskName: '',\n      initialTime: 0,\n      isStartTimer: false,\n      isOpenDialogNoName: false,\n    };\n  }\n\n  async componentDidMount() {\n    const isStartTimer = getLS('isStartTimer');\n    const timeSpend = getLS('timeSpend');\n\n    const initialTime = isStartTimer\n      ? currentTime() - getLS('timeStart') + timeSpend\n      : timeSpend;\n\n    await this.setState({\n      initialTime,\n      isStartTimer,\n    });\n  }\n\n  toggleStatusTimer = (start, stop, reset) => {\n    if (this.state.isStartTimer) {\n      if (this.state.taskName === '') {\n        this._toggleDialogTaskNoName(true);\n      } else {\n        stop();\n        this._addTaskLog(reset);\n      }\n    } else {\n      start();\n      setLS('isStartTimer', 1);\n      setLS('timeStart', currentTime());\n      this.setState({\n        isStartTimer: true,\n      });\n    }\n  };\n\n  handleChangeTaskName = event => {\n    this.setState({\n      taskName: event.target.value,\n    });\n  };\n\n  _addTaskLog = reset => {\n    const taskName = this.state.taskName;\n    const timeStart = getLS('timeStart');\n    let timeSpend = currentTime() - timeStart;\n    let timeEnd = timeStart + timeSpend;\n\n    const sec = 1000;\n    if (timeSpend < sec && timeStart) {\n      timeSpend = sec;\n    }\n\n    this.props.setTask({\n      taskName,\n      timeStart,\n      timeEnd,\n      timeSpend,\n    });\n\n    this.setState({\n      taskName: '',\n      initialTime: 0,\n      isStartTimer: false,\n      isOpenDialogNoName: false,\n    });\n\n    setLS('timeSpend', 0);\n    setLS('isStartTimer', 0);\n\n    reset();\n  };\n\n  _toggleDialogTaskNoName = status =>\n    this.setState({ isOpenDialogNoName: status });\n  _getFormatValue = (value, text = ':') =>\n    `${value < 10 ? `0${value}` : value}${text}`;\n\n  render() {\n    const {\n      taskName,\n      initialTime,\n      isStartTimer,\n      isOpenDialogNoName,\n    } = this.state;\n\n    return (\n      <div className=\"timer__wrapper\">\n        <Dialog\n          isOpenDialog={isOpenDialogNoName}\n          clickDialogOpen={() => this._toggleDialogTaskNoName(true)}\n          clickDialogClose={() => this._toggleDialogTaskNoName(false)}\n          clickDialogSuccess={() => this._toggleDialogTaskNoName(false)}\n          dialogTitle=\"Empty task name\"\n          dialogContentText=\"You are trying close your task without name, please enter the title and try gain!\"\n        />\n\n        <ReactTimer\n          initialTime={initialTime}\n          startImmediately={isStartTimer}\n          formatValue={value => this._getFormatValue(value)}\n        >\n          {({ start, stop, reset }) => (\n            <>\n              <TextField\n                value={taskName}\n                onChange={this.handleChangeTaskName}\n                placeholder=\"Name of your task\"\n                className=\"timer__input\"\n              />\n              <Paper className=\"timer\">\n                <ReactTimer.Hours\n                  formatValue={value => this._getFormatValue(value)}\n                />\n                <ReactTimer.Minutes />\n                <ReactTimer.Seconds\n                  formatValue={value => this._getFormatValue(value, '')}\n                />\n              </Paper>\n              <Button\n                variant=\"contained\"\n                className=\"btn\"\n                onClick={() => this.toggleStatusTimer(start, stop, reset)}\n              >\n                {!isStartTimer ? 'Start' : 'Stop'}\n              </Button>\n            </>\n          )}\n        </ReactTimer>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = ({ tasks }) => {\n  return {\n    tasks,\n  };\n};\n\nconst mapDispatchToProps = {\n  setTask,\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Timer);\n","import React from 'react';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\n\nexport default class TasksNotFound extends React.Component {\n  render() {\n    return (\n      <TableRow>\n        <TableCell align=\"center\" colSpan=\"7\">\n          Tasks Not Found\n        </TableCell>\n      </TableRow>\n    );\n  }\n}\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport Button from '@material-ui/core/Button';\nimport { ROUTER } from 'utils/constants';\n\nclass BtnInfo extends React.Component {\n  render() {\n    const { styleButton, index } = this.props;\n\n    return (\n      <Link to={`${ROUTER.taskInfo}${index}`}>\n        <Button variant=\"contained\" style={styleButton}>\n          Info\n        </Button>\n      </Link>\n    );\n  }\n}\n\nexport default BtnInfo;\n","import React from 'react';\nimport Button from '@material-ui/core/Button';\n\nimport { connect } from 'react-redux';\nimport { removeTask } from 'store/modules/tasks';\n\nimport Dialog from 'components/Dialog';\n\nclass BtnRemove extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      isOpenDialogRemove: false,\n    };\n  }\n\n  _toggleDialogRemove = status => this.setState({ isOpenDialogRemove: status });\n\n  render() {\n    const { isOpenDialogRemove } = this.state;\n    const { styleButton, taskIndex, removeTask } = this.props;\n\n    return (\n      <>\n        <Button\n          variant=\"contained\"\n          style={styleButton}\n          onClick={() => this._toggleDialogRemove(true)}\n        >\n          Delete\n        </Button>\n\n        <Dialog\n          isOpenDialog={isOpenDialogRemove}\n          clickDialogClose={() => this._toggleDialogRemove(false)}\n          clickDialogSuccess={() => {\n            this._toggleDialogRemove(false);\n            removeTask(taskIndex);\n          }}\n          btnRejectText=\"No\"\n          btnSuccessText=\"Yes\"\n          dialogTitle=\"You are sure?\"\n        />\n      </>\n    );\n  }\n}\n\nconst mapDispatchToProps = {\n  removeTask,\n};\n\nexport default connect(\n  null,\n  mapDispatchToProps\n)(BtnRemove);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\n\nimport { getFormatTime } from 'utils/utils';\n\nimport BtnInfo from './BtnInfo';\nimport BtnRemove from './BtnRemove';\n\nconst styleButton = {\n  background: 'white',\n  borderRadius: 0,\n};\n\nclass TasksRows extends React.Component {\n  _getTimeEnd = task =>\n    getFormatTime(task.timeStart) === getFormatTime(task.timeEnd)\n      ? getFormatTime(task.timeEnd + 1000)\n      : getFormatTime(task.timeEnd);\n\n  render() {\n    return (\n      <>\n        {this.props.tasks.map((task, index) => (\n          <TableRow key={`task-body-${index}`}>\n            <TableCell component=\"th\" scope=\"row\">\n              {++index}\n            </TableCell>\n            <TableCell align=\"left\">{task.taskName}</TableCell>\n            <TableCell align=\"center\">\n              {getFormatTime(task.timeStart)}\n            </TableCell>\n            <TableCell align=\"center\">{this._getTimeEnd(task)}</TableCell>\n            <TableCell align=\"center\">\n              {getFormatTime(task.timeSpend, true)}\n            </TableCell>\n            <TableCell align=\"center\">\n              <BtnInfo\n                index={--index}\n                task={task}\n                styleButton={styleButton}\n                getFormatTime={getFormatTime}\n              />\n            </TableCell>\n            <TableCell align=\"center\">\n              <BtnRemove taskIndex={index} styleButton={styleButton} />\n            </TableCell>\n          </TableRow>\n        ))}\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = ({ tasks }) => {\n  return {\n    tasks,\n  };\n};\n\nexport default connect(mapStateToProps)(TasksRows);\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\n\nimport { connect } from 'react-redux';\n\nimport TasksNotFound from './TasksNotFound';\nimport TasksRows from './TasksRows/TasksRows';\n\nconst useStyles = makeStyles(() => ({\n  root: {\n    width: '100%',\n    overflowX: 'auto',\n    borderRadius: 0,\n  },\n  table: {\n    minWidth: 650,\n  },\n}));\n\nconst tableHeads = [\n  '№',\n  'Tasks',\n  'Time start',\n  'Time end',\n  'Time Spend',\n  'Info',\n  'Delete',\n];\n\nconst TableLog = ({ tasks }) => {\n  const classes = useStyles();\n\n  return (\n    <>\n      <Paper className={classes.root}>\n        <Table className={classes.table}>\n          <TableHead>\n            <TableRow>\n              {tableHeads.map((tableHead, index) => (\n                <TableCell key={`task-header-${index}`} align=\"center\">\n                  {tableHead}\n                </TableCell>\n              ))}\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {tasks.length ? <TasksRows /> : <TasksNotFound />}\n          </TableBody>\n        </Table>\n      </Paper>\n    </>\n  );\n};\n\nconst mapStateToProps = ({ tasks }) => {\n  return {\n    tasks,\n  };\n};\n\nexport default connect(mapStateToProps)(TableLog);\n","import { action, getDefaultChartColumns } from 'utils/utils';\n\nexport const BUILD_CHART = 'BUILD_CHART';\nexport const BUILD_CHART_SUCCESS = 'BUILD_CHART_SUCCESS';\nexport const BUILD_CHART_RESET = 'BUILD_CHART_RESET';\n\nexport const buildChart = () => action(BUILD_CHART);\nexport const buildChartReset = () => action(BUILD_CHART_RESET);\nexport const buildChartSuccess = chartColumns =>\n  action(BUILD_CHART_SUCCESS, chartColumns);\n\nconst initState = getDefaultChartColumns();\n\nexport const chartColumns = (state = initState, action) => {\n  switch (action.type) {\n    case BUILD_CHART_SUCCESS:\n      return action.payload;\n\n    case BUILD_CHART_RESET:\n      return getDefaultChartColumns();\n\n    default:\n      return state;\n  }\n};\n\nexport default chartColumns;\n","import React from 'react';\nimport Button from '@material-ui/core/Button/Button';\n\nimport { connect } from 'react-redux';\nimport { buildChart } from 'store/modules/chart';\nimport { setTask, resetTasks, refreshTasks } from 'store/modules/tasks';\nimport { generateNewTasks, setLS } from 'utils/utils';\n\nimport './BtnGenerate.scss';\n\nclass BtnGenerate extends React.Component {\n  _generate = async () => {\n    await this.props.resetTasks();\n    const newTasks = await generateNewTasks();\n    setLS('tasks', newTasks, false);\n    await this.props.refreshTasks(newTasks);\n    this.props.buildChart();\n  };\n\n  render() {\n    return (\n      <Button\n        variant=\"contained\"\n        className=\"btn btn__generate\"\n        onClick={() => this._generate()}\n      >\n        Generate\n      </Button>\n    );\n  }\n}\n\nconst mapDispatchToProps = {\n  setTask,\n  refreshTasks,\n  resetTasks,\n  buildChart,\n};\n\nexport default connect(\n  null,\n  mapDispatchToProps\n)(BtnGenerate);\n","import React, { PureComponent } from 'react';\nimport {\n  ResponsiveContainer,\n  BarChart,\n  Bar,\n  CartesianGrid,\n  XAxis,\n  YAxis,\n} from 'recharts';\n\nimport { connect } from 'react-redux';\nimport { buildChart } from 'store/modules/chart';\n\nimport BtnGenerate from './BtnGenerate/BtnGenerate';\n\nclass Chart extends PureComponent {\n  componentDidMount() {\n    this.props.buildChart();\n  }\n\n  render() {\n    return (\n      <>\n        <ResponsiveContainer width=\"100%\" height={300}>\n          <BarChart data={this.props.chartColumns}>\n            <CartesianGrid stroke=\"#ccc\" />\n            <XAxis dataKey=\"name\" />\n            <YAxis domain={[0, 60]} />\n            <Bar\n              type=\"monotone\"\n              dataKey=\"uv\"\n              barSize={30}\n              fill=\"#8884d8\"\n              label={renderLabel}\n            />\n          </BarChart>\n        </ResponsiveContainer>\n\n        <BtnGenerate />\n      </>\n    );\n  }\n}\n\nconst renderLabel = ({ payload, x, y, width, height, value }) => {\n  if (value > 0) {\n    let dy = 16;\n    let fill = '#fff';\n\n    if (value <= 5) {\n      dy = -6;\n      fill = '#000';\n    }\n\n    return (\n      <text x={x + width / 2} y={y} fill={fill} textAnchor=\"middle\" dy={dy}>\n        {value}\n      </text>\n    );\n  } else {\n    return null;\n  }\n};\n\nconst mapStateToProps = ({ chartColumns }) => {\n  return {\n    chartColumns,\n  };\n};\n\nconst mapDispatchToProps = {\n  buildChart,\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Chart);\n","import React from 'react';\nimport { Link, Route, Switch, withRouter } from 'react-router-dom';\nimport AppBar from '@material-ui/core/AppBar';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\n\nimport TasksLog from '../TableLog/TableLog';\nimport TasksChart from '../Chart/Chart';\n\nimport { ROUTER } from 'utils/constants';\n\nimport './Tabs.scss';\n\nclass NavTabs extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      activeTabIndex: 0,\n    };\n  }\n\n  componentDidMount() {\n    this.setState({\n      activeTabIndex:\n        this.props.location.pathname === ROUTER.tasksChart ? 1 : 0,\n    });\n  }\n\n  handleChange = (event, activeTabIndex) => {\n    this.setState({\n      activeTabIndex,\n    });\n  };\n\n  render() {\n    const { activeTabIndex } = this.state;\n\n    return (\n      <div className=\"tabs__wrapper\">\n        <AppBar position=\"static\">\n          <Tabs\n            variant=\"fullWidth\"\n            value={activeTabIndex}\n            onChange={this.handleChange}\n          >\n            <Tab label=\"Task Log\" component={Link} to={ROUTER.tasksLog} />\n            <Tab label=\"Task Chart\" component={Link} to={ROUTER.tasksChart} />\n          </Tabs>\n        </AppBar>\n        <Switch>\n          <Route\n            exact\n            path={[ROUTER.tasksLog, ROUTER.home]}\n            component={TasksLog}\n          />\n          <Route exact path={ROUTER.tasksChart} component={TasksChart} />\n        </Switch>\n      </div>\n    );\n  }\n}\n\nexport default withRouter(NavTabs);\n","import React from 'react';\nimport './NotFound.scss';\n\nconst NotFound = () => (\n  <div className=\"not-found__wrapper\">\n    <div> 404 </div>\n  </div>\n);\n\nexport default NotFound;\n","import { combineReducers } from 'redux';\nimport { tasks } from './modules/tasks';\nimport { chartColumns } from './modules/chart';\n\nexport default combineReducers({\n  tasks,\n  chartColumns,\n});\n","import { put, call, select, takeEvery } from 'redux-saga/effects';\nimport {\n  BUILD_CHART,\n  buildChartReset,\n  buildChartSuccess,\n} from 'store/modules/chart';\nimport { changeTaskFormat, setChartColumns } from 'utils/utils';\n\nfunction* buildChart() {\n  try {\n    yield put(buildChartReset());\n\n    const { tasks, chartColumns } = yield select();\n    const newTasksFormat = yield call(() => changeTaskFormat(tasks));\n    const chartColumnsWithValue = yield call(() =>\n      setChartColumns(chartColumns, newTasksFormat)\n    );\n\n    yield put(buildChartSuccess(chartColumnsWithValue));\n  } catch (error) {\n    console.log('error: ', error);\n  }\n}\n\nexport function* watchBuildChart() {\n  yield takeEvery(BUILD_CHART, buildChart);\n}\n","import { takeEvery, select } from 'redux-saga/effects';\nimport { action, getLS, setLS } from 'utils/utils';\nimport { SET_TASK, REMOVE_TASK } from 'store/modules/tasks';\n\nfunction* setTask() {\n  try {\n    const { tasks } = yield select();\n    setLS('tasks', [...tasks, action.payload], false);\n  } catch (error) {\n    console.log('error: ', error);\n  }\n}\nfunction* removeTask() {\n  try {\n    const { tasks } = yield select();\n    setLS(\n      'tasks',\n      [...tasks.slice(0, action.payload), ...tasks.slice(action.payload + 1)],\n      false\n    );\n  } catch (error) {\n    console.log('error: ', error);\n  }\n}\n\nexport function* watchTasks() {\n  yield takeEvery(SET_TASK, setTask);\n  yield takeEvery(REMOVE_TASK, removeTask);\n}\n","import { all } from 'redux-saga/effects';\n\nimport { watchBuildChart } from './buildChart';\nimport { watchTasks } from './tasks';\n\nexport default function* rootSaga() {\n  yield all([watchBuildChart(), watchTasks()]);\n}\n","import { createStore, applyMiddleware } from 'redux';\nimport rootReducer from './rootReducers';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport createSagaMiddleware from 'redux-saga';\nimport rootSaga from './sagas';\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(sagaMiddleware))\n);\n\nsagaMiddleware.run(rootSaga);\n\nexport default store;\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\nimport Container from '@material-ui/core/Container';\n\nimport TaskInfo from 'components/TaskInfo';\nimport Timer from 'containers/Timer/Timer';\nimport Tabs from 'containers/Tasks/Tabs/Tabs';\nimport NotFound from 'containers/NotFound';\n\nimport { ROUTER } from 'utils/constants';\nimport store from 'store';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <Provider store={store}>\n        <Container>\n          <BrowserRouter>\n            <Switch>\n              <Route\n                path={[ROUTER.home, ROUTER.tasksLog, ROUTER.tasksChart]}\n                exact\n              >\n                <Timer />\n                <Tabs />\n              </Route>\n\n              <Route path={`${ROUTER.taskInfo}:id`}>\n                <TaskInfo />\n              </Route>\n\n              <Route component={NotFound} />\n            </Switch>\n          </BrowserRouter>\n        </Container>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from 'components/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'scss/index.scss';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}