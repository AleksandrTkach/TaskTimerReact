{"version":3,"sources":["components/Dialog.js","containers/Timer/Button/Button.js","utils/constants.js","utils/utils.js","store/types.js","store/actions/index.js","containers/Timer/Timer.js","containers/Tasks/TableLog/TasksNotFound.js","containers/Tasks/TableLog/TasksRows/BtnInfo.js","containers/Tasks/TableLog/TasksRows/BtnRemove.js","containers/Tasks/TableLog/TasksRows/TasksRows.js","containers/Tasks/TableLog/TableLog.js","containers/Tasks/Chart/BtnGenerate.js","containers/Tasks/Chart/Chart.js","containers/Tasks/Tabs.js","containers/NotFound.js","components/Router.js","store/reducers/tasks.js","store/reducers/chartColumns.js","store/reducers/index.js","store/sagas/buildChart.js","store/sagas/index.js","store/index.js","components/App.js","serviceWorker.js","index.js"],"names":["FormDialog","_this$props","this","props","_this$props$dialogTit","dialogTitle","dialogContentText","isOpenDialog","clickDialogClose","clickDialogSuccess","_this$props$btnSucces","btnSuccessText","_this$props$btnReject","btnRejectText","react_default","a","createElement","Dialog","open","onClose","aria-labelledby","DialogTitle","id","DialogContent","DialogContentText","children","DialogActions","Button","onClick","color","React","Component","TimerButton","_this","Button_default","variant","className","toggleStatusTimer","start","stop","reset","isStartTimer","AMOUNT_TASKS","TASK_DURATION","MIN","MAX","getLS","key","arguments","length","undefined","Number","localStorage","getItem","JSON","parse","setLS","value","setItem","stringify","currentTime","Date","getTime","generateNewTasks","date","amountTasks","_getRandomNumber","timeStart","getFullYear","getMonth","getDate","newTasks","i","timeEnd","_getNextTime","push","taskName","concat","timeSpend","time","min","max","Math","round","random","changeTaskFormat","tasks","map","task","startHour","moment","format","startMin","startSec","endHour","endMin","endSec","setChartColumns","chartColumns","newTasksFormat","columns","Object","toConsumableArray","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","diffHour","hour","uv","err","return","getDefaultChartColumns","name","BUILD_CHART","setTask","payload","action","buildChart","types","buildChartReset","buildChartSuccess","type","Timer","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","_toggleDialogTaskNoName","_addTaskLog","setState","handleChangeTaskName","event","target","initialTime","isOpenDialogNoName","status","_getFormatValue","text","_this2","_this$state","components_Dialog","clickDialogOpen","build","startImmediately","formatValue","_ref","Fragment","TextField","onChange","placeholder","Paper","Hours","Minutes","Seconds","Button_TimerButton","mapDispatchToProps","connect","_ref2","TasksNotFound","TableRow","TableCell","align","colSpan","BtnInfo","_toggleDialogInfo","isOpenDialogInfo","styleButton","getFormatTime","style","Table","TableBody","BtnRemove","_toggleDialogRemove","isOpenDialogRemove","taskIndex","removeTask","index","background","borderRadius","TasksRows","isUTC","utc","_getTimeEnd","component","scope","TasksRows_BtnInfo","TasksRows_BtnRemove","useStyles","makeStyles","root","width","overflowX","table","minWidth","tableHeads","classes","TableHead","tableHead","TableLog_TasksRows_TasksRows","TasksNotFound_TasksNotFound","BtnGenerate","_generate","_callee","regenerator_default","wrap","_context","prev","resetTasks","sent","refreshTasks","Chart","es6","height","data","stroke","dataKey","domain","barSize","fill","label","renderLabel","Tasks_Chart_BtnGenerate","PureComponent","x","y","dy","textAnchor","NavTabs","handleChange","newValue","location","pathname","AppBar","position","Tabs","Tab","Link","to","react_router","path","TasksLog","TasksChart","withRouter","NotFound","Router","console","log","isShow","display","containers_Timer_Timer","containers_Tasks_Tabs","initState","splice","combineReducers","watchBuildChart","chartColumnsWithValue","put","select","t0","_marked","_context2","takeEvery","_marked2","rootSaga","all","sagas_marked","sagaMiddleware","createSagaMiddleware","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","run","App","es","Container","react_router_dom","components_Router","Boolean","window","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4149edcf.chunk.js","sourcesContent":["import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\nclass FormDialog extends React.Component {\n  render() {\n    const {\n      dialogTitle = '',\n      dialogContentText,\n      isOpenDialog,\n      clickDialogClose,\n      clickDialogSuccess,\n      btnSuccessText = 'Close',\n      btnRejectText = null,\n    } = this.props;\n\n    return (\n      <Dialog\n        open={isOpenDialog}\n        onClose={clickDialogClose}\n        aria-labelledby=\"form-dialog-title\"\n      >\n        <DialogTitle id=\"form-dialog-title\">{dialogTitle}</DialogTitle>\n\n        <DialogContent>\n          <DialogContentText>{dialogContentText}</DialogContentText>\n          {this.props.children}\n        </DialogContent>\n\n        <DialogActions>\n          {btnRejectText !== null ? (\n            <Button onClick={clickDialogClose} color=\"primary\">\n              {btnRejectText}\n            </Button>\n          ) : null}\n          <Button onClick={clickDialogSuccess} color=\"primary\">\n            {btnSuccessText}\n          </Button>\n        </DialogActions>\n      </Dialog>\n    );\n  }\n}\n\nexport default FormDialog;\n","import React from 'react';\nimport Button from '@material-ui/core/Button/Button';\nimport './Button.scss';\n\nexport default class TimerButton extends React.Component {\n  render() {\n    return (\n      <Button\n        variant=\"contained\"\n        className={'btn'}\n        onClick={() =>\n          this.props.toggleStatusTimer(\n            this.props.start,\n            this.props.stop,\n            this.props.reset\n          )\n        }\n      >\n        {!this.props.isStartTimer ? 'Start' : 'Stop'}\n      </Button>\n    );\n  }\n}\n","export const AMOUNT_TASKS = {\n\tMIN: 10,\n\tMAX: 15,\n};\nexport const TASK_DURATION = {\n\tMIN: 10,\n\tMAX: 90,\n};\nexport const MIN = 1000 * 60;\n","import { MIN, TASK_DURATION, AMOUNT_TASKS } from 'utils/constants';\nimport moment from 'moment';\n\n/**\n * Get value from LocalStorage\n *\n * @param key\n * @param isNumber\n * @returns {number}\n */\nexport const getLS = (key, isNumber = true) =>\n\tisNumber\n\t\t? Number(localStorage.getItem(key))\n\t\t: JSON.parse(localStorage.getItem(key));\n\n/**\n * Set value from LocalStorage\n *\n * @param key\n * @param value\n * @param isNumber\n */\nexport const setLS = (key, value, isNumber = true) =>\n\tisNumber\n\t\t? localStorage.setItem(key, value)\n\t\t: localStorage.setItem(key, JSON.stringify(value));\n\n/**\n * Get current time\n *\n * @returns {number}\n */\nexport const currentTime = () => new Date().getTime();\n\n/**\n * Generate new tasks\n *\n * @returns {Array}\n */\nexport const generateNewTasks = () => {\n\tconst date = new Date();\n\tconst amountTasks = _getRandomNumber(AMOUNT_TASKS.MIN, AMOUNT_TASKS.MAX);\n\tlet timeStart = Number(\n\t\tnew Date(date.getFullYear(), date.getMonth(), date.getDate()).getTime()\n\t);\n\n\tconst newTasks = [];\n\tfor (let i = 0; i < amountTasks; i++) {\n\t\tconst timeEnd = _getNextTime(timeStart);\n\n\t\tnewTasks.push({\n\t\t\ttaskName: `Task ${i}`,\n\t\t\ttimeStart,\n\t\t\ttimeEnd,\n\t\t\ttimeSpend: timeEnd - timeStart,\n\t\t});\n\n\t\ttimeStart = _getNextTime(timeEnd);\n\t}\n\treturn newTasks;\n};\n\n/**\n * Get random time for task\n * @param time\n * @returns {*}\n * @private\n */\nfunction _getNextTime(time) {\n\treturn time + _getRandomNumber(TASK_DURATION.MIN, TASK_DURATION.MAX) * MIN;\n}\n\n/**\n * Get random number\n *\n * @param min\n * @param max\n * @returns {number}\n * @private\n */\nfunction _getRandomNumber(min, max) {\n\treturn Math.round(Math.random() * (max - min) + min);\n}\n\n/**\n * Convert format tasks for chart\n *\n * @param tasks\n * @returns {*}\n */\nexport const changeTaskFormat = tasks =>\n\ttasks.map(task => {\n\t\treturn {\n\t\t\tstartHour: Number(moment(task.timeStart).format('H')),\n\t\t\tstartMin: Number(moment(task.timeStart).format('m')),\n\t\t\tstartSec: Number(moment(task.timeStart).format('s')),\n\n\t\t\tendHour: Number(moment(task.timeEnd).format('H')),\n\t\t\tendMin: Number(moment(task.timeEnd).format('m')),\n\t\t\tendSec: Number(moment(task.timeEnd).format('s')),\n\t\t};\n\t});\n\n/**\n * Set columns for chart\n *\n * @param chartColumns\n * @param newTasksFormat\n * @returns {Array}\n */\nexport const setChartColumns = (chartColumns, newTasksFormat) => {\n\tlet columns = [...chartColumns];\n\n\tfor (const task of newTasksFormat) {\n\t\tconst diffHour = task.endHour - task.startHour;\n\n\t\tif (diffHour > 0) {\n\t\t\tfor (let hour = task.startHour; hour < task.endHour; hour++) {\n\t\t\t\tif (task.startHour === hour) {\n\t\t\t\t\tcolumns[hour].uv += 60 - task.startMin;\n\t\t\t\t} else {\n\t\t\t\t\tcolumns[hour].uv += 60;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcolumns[task.endHour].uv += task.endMin;\n\t\t} else if (diffHour === 0) {\n\t\t\tcolumns[task.endHour].uv += task.endMin - task.startMin;\n\t\t}\n\t}\n\n\treturn columns;\n};\n\n/**\n * Get empty columns for chart\n *\n * @returns {Array}\n */\nexport const getDefaultChartColumns = () => {\n\tconst columns = [];\n\tfor (let i = 0; i < 24; i++) {\n\t\tcolumns.push({\n\t\t\tname: i,\n\t\t\tuv: 0,\n\t\t});\n\t}\n\treturn columns;\n};\n","export const SET_TASK = 'SET_TASK';\nexport const REMOVE_TASK = 'REMOVE_TASK';\nexport const REFRESH_TASKS = 'REFRESH_TASKS';\nexport const RESET_TASKS = 'RESET_TASKS';\n\nexport const BUILD_CHART = 'BUILD_CHART';\nexport const BUILD_CHART_SUCCESS = 'BUILD_CHART_SUCCESS';\nexport const BUILD_CHART_RESET = 'BUILD_CHART_RESET';\n","import * as types from 'store/types';\n\nexport const setTask = payload => action(types.SET_TASK, payload);\nexport const removeTask = index => action(types.REMOVE_TASK, index);\nexport const refreshTasks = tasks => action(types.REFRESH_TASKS, tasks);\nexport const resetTasks = index => action(types.RESET_TASKS, index);\n\nexport const buildChart = () => action(types.BUILD_CHART);\nexport const buildChartReset = () => action(types.BUILD_CHART_RESET);\nexport const buildChartSuccess = chartColumns =>\n\taction(types.BUILD_CHART_SUCCESS, chartColumns);\n\nconst action = (type, payload) => {\n\treturn {\n\t\ttype,\n\t\tpayload,\n\t};\n};\n","import React from 'react';\nimport ReactTimer from 'react-compound-timer';\nimport Paper from '@material-ui/core/Paper';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from 'components/Dialog';\nimport Button from './Button/Button';\nimport './Timer.scss';\n\nimport { getLS, setLS, currentTime } from 'utils/utils';\nimport { setTask } from 'store/actions';\nimport { connect } from 'react-redux';\n\nclass Timer extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      taskName: '',\n      initialTime: 0,\n      isStartTimer: false,\n      isOpenDialogNoName: false,\n    };\n  }\n\n  async componentWillMount() {\n    const isStartTimer = getLS('isStartTimer');\n    const timeSpend = getLS('timeSpend');\n\n    const initialTime = isStartTimer\n      ? currentTime() - getLS('timeStart') + timeSpend\n      : timeSpend;\n\n    await this.setState({\n      initialTime,\n      isStartTimer,\n    });\n  }\n\n  toggleStatusTimer = (start, stop, reset) => {\n    if (this.state.isStartTimer) {\n      if (this.state.taskName === '') {\n        this._toggleDialogTaskNoName(true);\n      } else {\n        stop();\n        this._addTaskLog(reset);\n      }\n    } else {\n      start();\n      setLS('isStartTimer', 1);\n      setLS('timeStart', currentTime());\n      this.setState({\n        isStartTimer: true,\n      });\n    }\n  };\n\n  handleChangeTaskName = event => {\n    this.setState({\n      taskName: event.target.value,\n    });\n  };\n\n  _addTaskLog = reset => {\n    const taskName = this.state.taskName;\n    const timeStart = getLS('timeStart');\n    let timeSpend = currentTime() - timeStart;\n    let timeEnd = timeStart + timeSpend;\n\n    const sec = 1000;\n    if (timeSpend < sec && timeStart) {\n      timeSpend = sec;\n    }\n\n    this.props.setTask({\n      taskName,\n      timeStart,\n      timeEnd,\n      timeSpend,\n    });\n\n    this.setState({\n      taskName: '',\n      initialTime: 0,\n      isStartTimer: false,\n      isOpenDialogNoName: false,\n    });\n\n    setLS('timeSpend', 0);\n    setLS('isStartTimer', 0);\n\n    reset();\n  };\n\n  _toggleDialogTaskNoName = status =>\n    this.setState({ isOpenDialogNoName: status });\n  _getFormatValue = (value, text = ':') =>\n    `${value < 10 ? `0${value}` : value}${text}`;\n\n  render() {\n    const {\n      taskName,\n      initialTime,\n      isStartTimer,\n      isOpenDialogNoName,\n    } = this.state;\n\n    return (\n      <div className=\"timer__wrapper\">\n        <Dialog\n          isOpenDialog={isOpenDialogNoName}\n          clickDialogOpen={() => this._toggleDialogTaskNoName(true)}\n          clickDialogClose={() => this._toggleDialogTaskNoName(false)}\n          clickDialogSuccess={() => this._toggleDialogTaskNoName(false)}\n          dialogTitle=\"Empty task name\"\n          dialogContentText=\"You are trying close your task without name, please enter the title and try gain!\"\n        />\n\n        <ReactTimer\n          initialTime={initialTime}\n          startImmediately={isStartTimer}\n          formatValue={value => this._getFormatValue(value)}\n        >\n          {({ start, stop, reset }) => (\n            <>\n              <TextField\n                value={taskName}\n                onChange={this.handleChangeTaskName}\n                // onKeyDown={event => this.handleChangeTaskName(event, reset)}\n                placeholder=\"Name of your task\"\n                className=\"timer__input\"\n              />\n              <Paper className=\"timer\">\n                <ReactTimer.Hours\n                  formatValue={value => this._getFormatValue(value)}\n                />\n                <ReactTimer.Minutes />\n                <ReactTimer.Seconds\n                  formatValue={value => this._getFormatValue(value, '')}\n                />\n              </Paper>\n              <Button\n                start={start}\n                stop={stop}\n                reset={reset}\n                isStartTimer={isStartTimer}\n                toggleStatusTimer={this.toggleStatusTimer}\n              />\n            </>\n          )}\n        </ReactTimer>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = ({ tasks }) => {\n  return {\n    tasks,\n  };\n};\n\nconst mapDispatchToProps = {\n  setTask,\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Timer);\n","import React from 'react';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\n\nexport default class TasksNotFound extends React.Component {\n  render() {\n    return (\n      <TableRow>\n        <TableCell align=\"center\" colSpan=\"7\">\n          Tasks Not Found\n        </TableCell>\n      </TableRow>\n    );\n  }\n}\n","import React from 'react';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport Button from '@material-ui/core/Button';\n\nimport Dialog from 'components/Dialog';\n\nclass BtnInfo extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      isOpenDialogInfo: false,\n    };\n  }\n\n  _toggleDialogInfo = status => this.setState({ isOpenDialogInfo: status });\n\n  render() {\n    const { task, styleButton, getFormatTime } = this.props;\n    const { isOpenDialogInfo } = this.state;\n\n    return (\n      <>\n        <Button\n          variant=\"contained\"\n          style={styleButton}\n          onClick={() => this._toggleDialogInfo(true)}\n        >\n          Info\n        </Button>\n        <Dialog\n          isOpenDialog={isOpenDialogInfo}\n          clickDialogClose={() => this._toggleDialogInfo(false)}\n          clickDialogSuccess={() => this._toggleDialogInfo(false)}\n          dialogTitle={`${task.taskName}`}\n        >\n          <Table>\n            <TableBody>\n              <TableRow>\n                <TableCell align=\"left\"> Time start: </TableCell>\n                <TableCell align=\"left\">\n                  {getFormatTime(task.timeStart)}\n                </TableCell>\n              </TableRow>\n              <TableRow>\n                <TableCell align=\"left\"> Time end: </TableCell>\n                <TableCell align=\"left\">\n                  {getFormatTime(task.timeEnd)}\n                </TableCell>\n              </TableRow>\n              <TableRow>\n                <TableCell align=\"left\"> Time spend: </TableCell>\n                <TableCell align=\"left\">\n                  {getFormatTime(task.timeSpend, true)}\n                </TableCell>\n              </TableRow>\n            </TableBody>\n          </Table>\n        </Dialog>\n      </>\n    );\n  }\n}\n\nexport default BtnInfo;\n","import React from 'react';\nimport Button from '@material-ui/core/Button';\n\nimport { connect } from 'react-redux';\nimport { removeTask } from 'store/actions';\n\nimport Dialog from 'components/Dialog';\n\nclass BtnRemove extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      isOpenDialogRemove: false,\n    };\n  }\n\n  _toggleDialogRemove = status => this.setState({ isOpenDialogRemove: status });\n\n  render() {\n    const { isOpenDialogRemove } = this.state;\n    const { styleButton, taskIndex, removeTask } = this.props;\n\n    return (\n      <>\n        <Button\n          variant=\"contained\"\n          style={styleButton}\n          onClick={() => this._toggleDialogRemove(true)}\n        >\n          Delete\n        </Button>\n\n        <Dialog\n          isOpenDialog={isOpenDialogRemove}\n          clickDialogClose={() => this._toggleDialogRemove(false)}\n          clickDialogSuccess={() => {\n            this._toggleDialogRemove(false);\n            removeTask(taskIndex);\n          }}\n          btnRejectText=\"No\"\n          btnSuccessText=\"Yes\"\n          dialogTitle=\"You are sure?\"\n        />\n      </>\n    );\n  }\n}\n\nconst mapDispatchToProps = {\n  removeTask,\n};\n\nexport default connect(\n  null,\n  mapDispatchToProps\n)(BtnRemove);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport moment from 'moment';\n\nimport BtnInfo from './BtnInfo';\nimport BtnRemove from './BtnRemove';\n\nconst styleButton = {\n  background: 'white',\n  borderRadius: 0,\n};\n\nconst format = 'HH:mm:ss';\n\nclass TasksRows extends React.Component {\n  getFormatTime = (value, isUTC) =>\n    isUTC ? moment.utc(+value).format(format) : moment(+value).format(format);\n\n  _getTimeEnd = task =>\n    this.getFormatTime(task.timeStart) === this.getFormatTime(task.timeEnd)\n      ? this.getFormatTime(task.timeEnd + 1000)\n      : this.getFormatTime(task.timeEnd);\n\n  render() {\n    return (\n      <>\n        {this.props.tasks.map((task, index) => (\n          <TableRow key={`task-body-${index}`}>\n            <TableCell component=\"th\" scope=\"row\">\n              {++index}\n            </TableCell>\n            <TableCell align=\"left\">{task.taskName}</TableCell>\n            <TableCell align=\"center\">\n              {this.getFormatTime(task.timeStart)}\n            </TableCell>\n            <TableCell align=\"center\">{this._getTimeEnd(task)}</TableCell>\n            <TableCell align=\"center\">\n              {this.getFormatTime(task.timeSpend, true)}\n            </TableCell>\n            <TableCell align=\"center\">\n              <BtnInfo\n                task={task}\n                styleButton={styleButton}\n                getFormatTime={this.getFormatTime}\n              />\n            </TableCell>\n            <TableCell align=\"center\">\n              <BtnRemove taskIndex={--index} styleButton={styleButton} />\n            </TableCell>\n          </TableRow>\n        ))}\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = ({ tasks }) => {\n  return {\n    tasks,\n  };\n};\n\nexport default connect(mapStateToProps)(TasksRows);\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\n\nimport { connect } from 'react-redux';\n\nimport TasksNotFound from './TasksNotFound';\nimport TasksRows from './TasksRows/TasksRows';\n\nconst useStyles = makeStyles(() => ({\n  root: {\n    width: '100%',\n    overflowX: 'auto',\n    borderRadius: 0,\n  },\n  table: {\n    minWidth: 650,\n  },\n}));\n\nconst tableHeads = [\n  '№',\n  'Tasks',\n  'Time start',\n  'Time end',\n  'Time Spend',\n  'Info',\n  'Delete',\n];\n\nconst TableLog = ({ tasks }) => {\n  const classes = useStyles();\n\n  return (\n    <>\n      <Paper className={classes.root}>\n        <Table className={classes.table}>\n          <TableHead>\n            <TableRow>\n              {tableHeads.map((tableHead, index) => (\n                <TableCell key={`task-header-${index}`} align=\"center\">\n                  {tableHead}\n                </TableCell>\n              ))}\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {tasks.length ? <TasksRows /> : <TasksNotFound />}\n          </TableBody>\n        </Table>\n      </Paper>\n    </>\n  );\n};\n\nconst mapStateToProps = ({ tasks }) => {\n  return {\n    tasks,\n  };\n};\n\nexport default connect(mapStateToProps)(TableLog);\n","import React from 'react';\nimport Button from '@material-ui/core/Button/Button';\n\nimport { connect } from 'react-redux';\nimport { setTask, resetTasks, buildChart, refreshTasks } from 'store/actions';\nimport { generateNewTasks, setLS } from 'utils/utils';\n\nimport './BtnGenerate.scss';\n\nclass BtnGenerate extends React.Component {\n  _generate = async () => {\n    await this.props.resetTasks();\n    const newTasks = await generateNewTasks();\n    setLS('tasks', newTasks, false);\n    await this.props.refreshTasks(newTasks);\n    this.props.buildChart();\n  };\n\n  render() {\n    return (\n      <Button\n        variant=\"contained\"\n        className=\"btn btn__generate\"\n        onClick={() => this._generate()}\n      >\n        Generate\n      </Button>\n    );\n  }\n}\n\nconst mapDispatchToProps = {\n  setTask,\n  refreshTasks,\n  resetTasks,\n  buildChart,\n};\n\nexport default connect(\n  null,\n  mapDispatchToProps\n)(BtnGenerate);\n","import React, { PureComponent } from 'react';\nimport {\n  ResponsiveContainer,\n  BarChart,\n  Bar,\n  CartesianGrid,\n  XAxis,\n  YAxis,\n} from 'recharts';\n\nimport { connect } from 'react-redux';\nimport { buildChart } from 'store/actions';\n\nimport BtnGenerate from './BtnGenerate';\n\nclass Chart extends PureComponent {\n  componentDidMount() {\n    this.props.buildChart();\n  }\n\n  render() {\n    return (\n      <>\n        <ResponsiveContainer width=\"100%\" height={300}>\n          <BarChart data={this.props.chartColumns}>\n            <CartesianGrid stroke=\"#ccc\" />\n            <XAxis dataKey=\"name\" />\n            <YAxis domain={[0, 60]} />\n            <Bar\n              type=\"monotone\"\n              dataKey=\"uv\"\n              barSize={30}\n              fill=\"#8884d8\"\n              label={renderLabel}\n            />\n          </BarChart>\n        </ResponsiveContainer>\n\n        <BtnGenerate />\n      </>\n    );\n  }\n}\n\nconst renderLabel = ({ payload, x, y, width, height, value }) => {\n  if (value > 0) {\n    let dy = 16;\n    let fill = '#fff';\n\n    if (value <= 5) {\n      dy = -6;\n      fill = '#000';\n    }\n\n    return (\n      <text x={x + width / 2} y={y} fill={fill} textAnchor=\"middle\" dy={dy}>\n        {value}\n      </text>\n    );\n  } else {\n    return null;\n  }\n};\n\nconst mapStateToProps = ({ chartColumns }) => {\n  return {\n    chartColumns,\n  };\n};\n\nconst mapDispatchToProps = {\n  buildChart,\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Chart);\n","import React from 'react';\nimport { Link, Route, Switch, withRouter } from 'react-router-dom';\nimport AppBar from '@material-ui/core/AppBar';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\n\nimport TasksLog from './TableLog/TableLog';\nimport TasksChart from './Chart/Chart';\n\nimport './Tabs.scss';\n\nclass NavTabs extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      value: 0,\n    };\n  }\n\n  componentDidMount() {\n    this.setState({\n      value: this.props.location.pathname === '/tasks/chart' ? 1 : 0,\n    });\n  }\n\n  handleChange = (event, newValue) => {\n    this.setState({\n      value: newValue,\n    });\n  };\n\n  render() {\n    const { value } = this.state;\n    return (\n      <div className=\"tabs__wrapper\">\n        <AppBar position=\"static\">\n          <Tabs variant=\"fullWidth\" value={value} onChange={this.handleChange}>\n            <Tab label=\"Task Log\" component={Link} to=\"/tasks/log\" />\n            <Tab label=\"Task Chart\" component={Link} to=\"/tasks/chart\" />\n          </Tabs>\n        </AppBar>\n        <Switch>\n          <Route path=\"/tasks/log\" component={TasksLog} />\n          <Route path=\"/tasks/chart\" component={TasksChart} />\n        </Switch>\n      </div>\n    );\n  }\n}\n\nexport default withRouter(NavTabs);\n","import React from 'react';\nimport './NotFound.scss';\n\nconst NotFound = () => (\n  <div className=\"not-found__wrapper\">\n    <div> 404 </div>\n  </div>\n);\n\nexport default NotFound;\n","import React from 'react';\nimport { Route, withRouter } from 'react-router-dom';\nimport Timer from 'containers/Timer/Timer';\nimport TaskInfo from 'containers/Tasks/Tabs';\nimport NotFound from 'containers/NotFound';\n\nclass Router extends React.Component {\n  render() {\n    console.log('this.props: ', this.props);\n\n    const isShow =\n      this.props.location.pathname === '/tasks/log' ||\n      this.props.location.pathname === '/tasks/chart'\n        ? { display: 'block' }\n        : { display: 'none' };\n\n    return (\n      <>\n        <div style={isShow}>\n          <Timer />\n          <TaskInfo />\n        </div>\n        <Route component={NotFound} />\n      </>\n    );\n  }\n}\n\nexport default withRouter(Router);\n","import { SET_TASK, REMOVE_TASK, RESET_TASKS, REFRESH_TASKS } from '../types';\nimport { getLS, setLS } from 'utils/utils';\n\nconst initState = getLS('tasks', false) || [];\n\nconst tasks = (state = initState, action) => {\n\tswitch (action.type) {\n\t\tcase SET_TASK:\n\t\t\tconst tasks = [...state, action.payload];\n\t\t\tsetLS('tasks', tasks, false);\n\t\t\treturn tasks;\n\n\t\tcase REMOVE_TASK:\n\t\t\tlet newTasks = [...state];\n\t\t\tnewTasks.splice(action.payload, 1);\n\t\t\tsetLS('tasks', newTasks, false);\n\t\t\treturn newTasks;\n\n\t\tcase REFRESH_TASKS:\n\t\t\treturn action.payload;\n\n\t\tcase RESET_TASKS:\n\t\t\treturn [];\n\n\t\tdefault:\n\t\t\treturn state;\n\t}\n};\n\nexport default tasks;\n","import { BUILD_CHART_SUCCESS, BUILD_CHART_RESET } from '../types';\nimport { getDefaultChartColumns } from 'utils/utils';\n\nconst initState = getDefaultChartColumns();\n\nconst chartColumns = (state = initState, action) => {\n\tswitch (action.type) {\n\t\tcase BUILD_CHART_SUCCESS:\n\t\t\treturn action.payload;\n\n\t\tcase BUILD_CHART_RESET:\n\t\t\treturn getDefaultChartColumns();\n\n\t\tdefault:\n\t\t\treturn state;\n\t}\n};\n\nexport default chartColumns;\n","import { combineReducers } from 'redux';\nimport tasks from './tasks';\nimport chartColumns from './chartColumns';\n\nexport default combineReducers({\n\ttasks,\n\tchartColumns,\n});\n","import { put, call, select, takeEvery } from 'redux-saga/effects';\nimport { BUILD_CHART } from 'store/types';\nimport { buildChartReset, buildChartSuccess } from 'store/actions';\nimport { changeTaskFormat, setChartColumns } from 'utils/utils';\n\nfunction* buildChart() {\n\ttry {\n\t\tyield put(buildChartReset());\n\n\t\tconst { tasks, chartColumns } = yield select();\n\t\tconst newTasksFormat = yield call(() => changeTaskFormat(tasks));\n\t\tconst chartColumnsWithValue = yield call(() =>\n\t\t\tsetChartColumns(chartColumns, newTasksFormat)\n\t\t);\n\n\t\tyield put(buildChartSuccess(chartColumnsWithValue));\n\t} catch (error) {\n\t\tconsole.log('error: ', error);\n\t}\n}\n\nexport function* watchBuildChart() {\n\tyield takeEvery(BUILD_CHART, buildChart);\n}\n","import { all } from 'redux-saga/effects';\n\nimport { watchBuildChart } from './buildChart';\n\nexport default function* rootSaga() {\n\tyield all([watchBuildChart()]);\n}\n","import { createStore, applyMiddleware } from 'redux';\nimport rootReducer from './reducers';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport createSagaMiddleware from 'redux-saga';\nimport rootSaga from './sagas';\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst store = createStore(\n\trootReducer,\n\tcomposeWithDevTools(applyMiddleware(sagaMiddleware))\n);\n\nsagaMiddleware.run(rootSaga);\n\nexport default store;\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\nimport Container from '@material-ui/core/Container';\n\nimport Router from 'components/Router';\nimport store from 'store';\n\nconst App = () => (\n  <Provider store={store}>\n    <Container>\n      <BrowserRouter>\n        <Router />\n      </BrowserRouter>\n    </Container>\n  </Provider>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from 'components/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'scss/index.scss';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}